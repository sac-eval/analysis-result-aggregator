-- CPPCHECK
INSERT INTO rule_violation(rule_id, tool)
VALUES ('uninitvar', 'Cppcheck'),
       ('internalAstError', 'Cppcheck'),
       ('syntaxError', 'Cppcheck'),
       ('arrayIndexOutOfBounds', 'Cppcheck'),
       ('legacyUninitvar', 'Cppcheck'),
       ('returnDanglingLifetime', 'Cppcheck'),
       ('resourceLeak', 'Cppcheck'),
       ('bufferAccessOutOfBounds', 'Cppcheck'),
       ('missingReturn', 'Cppcheck'),
       ('negativeIndex', 'Cppcheck'),
       ('wrongPrintfScanfArgNum', 'Cppcheck'),
       ('leakReturnValNotUsed', 'Cppcheck'),
       ('zerodiv', 'Cppcheck'),
       ('IOWithoutPositioning', 'Cppcheck'),
       ('readWriteOnlyFile', 'Cppcheck'),
       ('writeReadOnlyFile', 'Cppcheck'),
       ('nullPointer', 'Cppcheck'),
       ('ctuuninitvar', 'Cppcheck'),
       ('autoVariables', 'Cppcheck'),
       ('unknownEvaluationOrder', 'Cppcheck'),
       ('integerOverflow', 'Cppcheck'),
       ('uninitStructMember', 'Cppcheck'),
       ('unknownMacro', 'Cppcheck'),
       ('preprocessorErrorDirective', 'Cppcheck'),
       ('invalidScanfFormatWidth', 'Cppcheck'),
       ('comparePointers', 'Cppcheck'),
       ('assignBoolToPointer', 'Cppcheck'),
       ('unusedVariable', 'Cppcheck'),
       ('unusedAllocatedMemory', 'Cppcheck');

-- INFER
INSERT INTO rule_violation(rule_id, tool)
VALUES ('UNINITIALIZED_VALUE', 'Infer'),
       ('NULL_DEREFERENCE', 'Infer'),
       ('DEAD_STORE', 'Infer'),
       ('RESOURCE_LEAK', 'Infer'),
       ('DIVIDE_BY_ZERO', 'Infer'),
       ('INTEGER_OVERFLOW_L1', 'Infer'),
       ('INTEGER_OVERFLOW_L2', 'Infer'),
       ('INTEGER_OVERFLOW_L5', 'Infer'),
       ('INTEGER_OVERFLOW_U5', 'Infer'),
       ('INEFFICIENT_KEYSET_ITERATOR', 'Infer'),
       ('POINTER_TO_INTEGRAL_IMPLICIT_CAST', 'Infer');

-- CPPCHECK INFER SYNONYMS
INSERT INTO synonyms(id, synonym_id)
VALUES (SELECT id FROM rule_violation WHERE rule_id = 'uninitvar' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'UNINITIALIZED_VALUE' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'UNINITIALIZED_VALUE' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'uninitvar' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'nullPointer' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'NULL_DEREFERENCE' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'NULL_DEREFERENCE' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'nullPointer' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'resourceLeak' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'RESOURCE_LEAK' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'RESOURCE_LEAK' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'resourceLeak' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'zerodiv' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'DIVIDE_BY_ZERO' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'DIVIDE_BY_ZERO' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'zerodiv' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_L1' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_L1' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_L2' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_L2' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_L5' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_L5' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_U5' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'INTEGER_OVERFLOW_U5' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'integerOverflow' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'uninitStructMember' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'UNINITIALIZED_VALUE' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'UNINITIALIZED_VALUE' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'uninitStructMember' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'unusedVariable' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'DEAD_STORE' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'DEAD_STORE' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'unusedVariable' AND tool = 'Cppcheck'),

       (SELECT id FROM rule_violation WHERE rule_id = 'unusedAllocatedMemory' AND tool = 'Cppcheck',
           SELECT id FROM rule_violation WHERE rule_id = 'DEAD_STORE' AND tool = 'Infer'),
       (SELECT id FROM rule_violation WHERE rule_id = 'DEAD_STORE' AND tool = 'Infer',
           SELECT id FROM rule_violation WHERE rule_id = 'unusedAllocatedMemory' AND tool = 'Cppcheck');

-- PMD
INSERT INTO rule_violation(rule_id, tool)
VALUES ('NoPackage', 'PMD'),
       ('UnusedLocalVariable', 'PMD'),
       ('UnusedPrivateMethod', 'PMD'),
       ('MethodNamingConventions', 'PMD'),
       ('UseUtilityClass', 'PMD'),
       ('CloseResource', 'PMD'),
       ('PreserveStackTrace', 'PMD'),
       ('ReturnEmptyCollectionRatherThanNull', 'PMD'),
       ('ControlStatementBraces', 'PMD'),
       ('LocalVariableNamingConventions', 'PMD'),
       ('UncommentedEmptyMethodBody', 'PMD'),
       ('UnnecessaryImport', 'PMD'),
       ('UselessParentheses', 'PMD'),
       ('UncommentedEmptyConstructor', 'PMD'),
       ('OneDeclarationPerLine', 'PMD'),
       ('ForLoopCanBeForeach', 'PMD'),
       ('UnnecessaryReturn', 'PMD'),
       ('SimplifyBooleanReturns', 'PMD'),
       ('FormalParameterNamingConventions', 'PMD'),
       ('UnnecessaryLocalBeforeReturn', 'PMD'),
       ('UnnecessaryModifier', 'PMD'),
       ('AvoidUsingHardCodedIP', 'PMD'),
       ('EmptyCatchBlock', 'PMD'),
       ('EmptyIfStmt', 'PMD'),
       ('SingularField', 'PMD'),
       ('LiteralsFirstInComparisons', 'PMD'),
       ('UnusedPrivateField', 'PMD'),
       ('ClassNamingConventions', 'PMD'),
       ('UseEqualsToCompareStrings', 'PMD'),
       ('UnusedFormalParameter', 'PMD'),
       ('LooseCoupling', 'PMD'),
       ('AbstractClassWithoutAnyMethod', 'PMD'),
       ('CompareObjectsWithEquals', 'PMD'),
       ('EmptyStatementNotInLoop', 'PMD'),
       ('UseCollectionIsEmpty', 'PMD'),
       ('LogicInversion', 'PMD'),
       ('GenericsNaming', 'PMD'),
       ('AvoidBranchingStatementAsLastInLoop', 'PMD'),
       ('SimplifyConditional', 'PMD'),
       ('UnnecessaryFullyQualifiedName', 'PMD'),
       ('ImplicitSwitchFallThrough', 'PMD'),
       ('DoNotExtendJavaLangThrowable', 'PMD'),
       ('UnconditionalIfStatement', 'PMD'),
       ('UselessOperationOnImmutable', 'PMD'),
       ('UseLocaleWithCaseConversions', 'PMD'),
       ('SuspiciousEqualsMethodName', 'PMD'),
       ('SwitchStmtsShouldHaveDefault', 'PMD'),
       ('UselessOverridingMethod', 'PMD'),
       ('FinalFieldCouldBeStatic', 'PMD'),
       ('NonThreadSafeSingleton', 'PMD'),
       ('IdenticalCatchBranches', 'PMD'),
       ('EmptyWhileStmt', 'PMD');

-- checkstyle
INSERT INTO rule_violation(rule_id, tool)
VALUES ('unused.local.var', 'Checkstyle'),
       ('name.invalidPattern', 'Checkstyle'),
       ('needBraces', 'Checkstyle'),
       ('import.unused', 'Checkstyle'),
       ('import.duplicate', 'Checkstyle'),
       ('simplify.expression', 'Checkstyle'),
       ('noNewlineAtEOF', 'Checkstyle'),
       ('javadoc.packageInfo', 'Checkstyle'),
       ('ws.preceded', 'Checkstyle'),
       ('ws.illegalFollow', 'Checkstyle'),
       ('ws.notPreceded', 'Checkstyle'),
       ('javadoc.missing', 'Checkstyle'),
       ('variable.notPrivate', 'Checkstyle'),
       ('final.parameter', 'Checkstyle'),
       ('Line has trailing spaces.', 'Checkstyle'),
       ('file.containsTab', 'Checkstyle'),
       ('redundantModifier', 'Checkstyle'),
       ('ws.notFollowed', 'Checkstyle'),
       ('maxLineLen', 'Checkstyle'),
       ('hide.utility.class', 'Checkstyle'),
       ('line.same', 'Checkstyle'),
       ('hidden.field', 'Checkstyle'),
       ('magic.number', 'Checkstyle'),
       ('import.avoidStar', 'Checkstyle'),
       ('multiple.variable.declarations.comma', 'Checkstyle'),
       ('ws.followed', 'Checkstyle'),
       ('import.lang', 'Checkstyle'),
       ('line.break.before', 'Checkstyle'),
       ('array.type.style', 'Checkstyle'),
       ('simplify.boolReturn', 'Checkstyle'),
       ('assignment.inner.avoid', 'Checkstyle'),
       ('line.previous', 'Checkstyle'),
       ('maxParam', 'Checkstyle'),
       ('mod.order', 'Checkstyle'),
       ('ws.typeCast', 'Checkstyle'),
       ('line.new', 'Checkstyle'),
       ('block.noStatement', 'Checkstyle'),
       ('line.alone', 'Checkstyle'),
       ('empty.statement', 'Checkstyle'),
       ('invalid.position', 'Checkstyle'),
       ('line.break.after', 'Checkstyle'),
       ('design.forExtension', 'Checkstyle'),
       ('multiple.variable.declarations', 'Checkstyle'),
       ('equals.noHashCode', 'Checkstyle'),
       ('javadoc.expectedTag', 'Checkstyle'),
       ('missing.switch.default', 'Checkstyle'),
       ('maxLen.method', 'Checkstyle'),
       ('javadoc.noPeriod', 'Checkstyle'),
       ('javadoc.return.expected', 'Checkstyle');

-- PMD-CHECKSTYLE SYNONYMS
INSERT INTO synonyms(id, synonym_id)
VALUES (SELECT id FROM rule_violation WHERE rule_id = 'UnusedLocalVariable' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'unused.local.var' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'unused.local.var' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'UnusedLocalVariable' AND tool = 'PMD'),

       (SELECT id FROM rule_violation WHERE rule_id = 'MethodNamingConventions' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'name.invalidPattern' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'name.invalidPattern' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'MethodNamingConventions' AND tool = 'PMD'),

       (SELECT id FROM rule_violation WHERE rule_id = 'ControlStatementBraces' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'needBraces' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'needBraces' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'ControlStatementBraces' AND tool = 'PMD'),

       (SELECT id FROM rule_violation WHERE rule_id = 'UnnecessaryImport' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'import.unused' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'import.unused' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'UnnecessaryImport' AND tool = 'PMD'),

       (SELECT id FROM rule_violation WHERE rule_id = 'UnnecessaryImport' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'import.duplicate' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'import.duplicate' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'UnnecessaryImport' AND tool = 'PMD'),

       (SELECT id FROM rule_violation WHERE rule_id = 'ClassNamingConventions' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'name.invalidPattern' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'name.invalidPattern' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'ClassNamingConventions' AND tool = 'PMD'),

       (SELECT id FROM rule_violation WHERE rule_id = 'LogicInversion' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'simplify.expression' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'simplify.expression' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'LogicInversion' AND tool = 'PMD'),

       (SELECT id FROM rule_violation WHERE rule_id = 'SimplifyConditional' AND tool = 'PMD',
           SELECT id FROM rule_violation WHERE rule_id = 'simplify.expression' AND tool = 'Checkstyle'),
       (SELECT id FROM rule_violation WHERE rule_id = 'simplify.expression' AND tool = 'Checkstyle',
           SELECT id FROM rule_violation WHERE rule_id = 'SimplifyConditional' AND tool = 'PMD');